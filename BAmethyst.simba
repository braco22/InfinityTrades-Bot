{$UNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '0'}

program BAmethyst;
{$DEFINE SRL_USE_REMOTEINPUT}
{$DEFINE FORMS_V2}
{$I SRL-T/OSR.simba}
{$I WaspLib/osr.simba}

Const
{---------Start setup---------}
//Thanks Flight.
{ Advanced settings }

  PERCSHIFT         = 14;
  PDIST             = 1;
  MAXRUNTIME        = 30000;
  WORLDLIST         = [305..307,313..315,320..323,329..332,337..340,443..446,477..482,
                      484..493];

{----------End setup----------}

Type
  EState = (
    MINING, DEPOSIT_ITEMS, DO_ANTIBAN, DO_SPEC, HOP_WORLD
  );

  //Thanks to Flight.
  TMSObject = record
    Color   : TCTS2Color;
    Tiles   : TPointArray;
    UpText,
    Options : TStringArray;
    WalkTile: TPoint;
    Expand  : Int32;
  end;

  TZone = record
    Name      : String;
    Block     : TPoint;
    IsUpper   : Boolean;
    Area,Veins,
    WalkTiles : TPointArray;
  end;

  TScript = record
    State                 : EState;
    DepositBoxObj         : TMSObject;

    AmethystOre           : TRSObject;
    MiningArea            : TPointArray;

    CAmethyst,
    CUniMaterials,
    Inventories, HopTime,
    Price, StartXP,
    ToolSlot, FailCount,
    TripCount             : Int32;

    ShutdownTime          : Int64;

    TakeBreaks,
    TakeSleeps,
    EmptyGemBag           : Boolean;

    TrueRunTime           : TStopwatch;
    RSW                   : TRSWalker;
  end;

  TRSDepositBoxItem = record
    Item                  : TRSItem;
    Quantity              : Int32;
  end;

Var
  Bot    : TScript;
  GUI    : TScriptForm;

Const
  DBTile      : TPoint = [6387, 620]; {getobject.simba}


procedure TScript.WriteMsg(Message: String);
begin
  WriteLn('[Bot]: '+Message);
end;

procedure TScriptForm.StartScript(Sender: TObject); override;
var
  S: TObject;
  MaxRun: Int32;
  e_Run,e_BA,e_BF,e_SA,e_SF: TEdit;
  cb_Breaks,cb_Sleeps: TCheckBox;


begin
  inherited;

  Self.Form.Close();
  Bot.WriteMsg('Starting script');

  { Time settings }
  e_Run            := Self.Form.GetChild('box_run_edit');
  MaxRun           := StrToInt(e_Run.getText);
  Bot.ShutdownTime := (MaxRun * 60000) + Random(- (MaxRun * 6000), (MaxRun * 6000));

  cb_Breaks        := Self.Form.GetChild('cb_breaks_checkbox');
  Bot.TakeBreaks   := cb_Breaks.IsChecked;
  if Bot.TakeBreaks then
  begin
    e_BA           := Self.Form.GetChild('box_ba_edit');
    e_BF           := Self.Form.GetChild('box_bf_edit');
    Antiban.AddBreak(ONE_MINUTE*StrToInt(e_BA.getText),ONE_MINUTE*StrToInt(e_BF.getText), 0.15, 1.0);
  end;

  cb_Sleeps        := Self.Form.GetChild('cb_sleeps_checkbox');
  Bot.TakeSleeps   := cb_Sleeps.IsChecked;
  if Bot.TakeSleeps then
  begin
    e_SA           := Self.Form.GetChild('box_sa_edit');
    e_SF           := Self.Form.GetChild('box_sf_edit');
    Antiban.AddSleep(e_SA.getText, StrToInt(e_SF.getText) * ONE_HOUR, 0.1, 1.0);
  end;

  S := Sender;
end;

function TScriptForm.CreateSettingsTab(): TTabSheet;
var
  lb_Time,lb_Script: TLabel;
  cb_Breaks,cb_Sleeps: TLabeledCheckBox;
  box_Run,box_BA,box_BF,
  box_SA,box_SF: TLabeledEdit;
begin
  Result.Init(nil);
  Result.SetCaption('Script settings');
  Result.SetName('Settings_Tab');

{ Setup time settings }
  with lb_Time do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(25));
    SetTop(TControl.AdjustToDPI(10));
    SetFontColor(2145591);
    GetFont().SetSize(15);
    SetCaption('Time settings');
  end;

  with box_Run do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(5));
    SetTop(TControl.AdjustToDPI(45));
    SetName('box_Run');
    SetCaption('Max run time');
    SetToolTip('Time in minutes');
    SetText('300');
    SetFontColor($00FFFF);
  end;

  with cb_Breaks do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(25));
    SetTop(TControl.AdjustToDPI(105));
    SetName('cb_breaks');
    SetCaption('Take breaks');
    SetFontColor($00FFFF);
    SetChecked(True);
  end;

  with box_BA do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(5));
    SetTop(TControl.AdjustToDPI(125));
    SetName('box_ba');
    SetCaption('Break after');
    SetToolTip('Time in minutes');
    SetText('135');
    SetFontColor($00FFFF);
  end;

  with box_BF do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(5));
    SetTop(TControl.AdjustToDPI(170));
    SetName('box_bf');
    SetCaption('Break for');
    SetToolTip('Time in minutes');
    SetText('15');
    SetFontColor($00FFFF);
  end;

  with cb_Sleeps do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(25));
    SetTop(TControl.AdjustToDPI(220));
    SetName('cb_sleeps');
    SetCaption('Take sleeps');
    SetFontColor($00FFFF);
  end;

  with box_SA do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(5));
    SetTop(TControl.AdjustToDPI(240));
    SetName('box_sa');
    SetCaption('Sleep at');
    SetToolTip('Time in 24Hr format');
    SetText('11:00:00');
    SetFontColor($00FFFF);
  end;

  with box_SF do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(5));
    SetTop(TControl.AdjustToDPI(285));
    SetName('box_sf');
    SetCaption('Sleep for');
    SetToolTip('Time in hours');
    SetText('2');
    SetFontColor($00FFFF);
  end;
end;

procedure TScriptForm.Setup(caption: String = 'Script Form'; size: TPoint = [750, 500]; allowResize: Boolean = False); override;
var
  Img: TPicture;
  BGImg: TImage;
  SButton: TButton;
begin
  inherited;

  Img.init();
  Img.LoadFromFile('Resources\BBackground.jpg');
  with BGImg do
  begin
    Init(Self.PageControl);
    SetParent(Self.PageControl);
    SetBounds(0,0,Self.Form.getWidth,Self.Form.getHeight);
    SetPicture(Img);
  end;

  Self.Start.setVisible(False);
  with SButton do
  begin
    Create(Self.Form);
    SetBounds(Self.Form.GetRight-190, Self.Form.GetBottom-70, 180, 60);
    GetFont.SetName('Bahnschrift');
    GetFont.SetSize(15);
    SetCaption('Start!');
    SetOnClick(@Self.StartScript);
  end;

  Self.AddTab(CreateSettingsTab());
  Self.CreateVersionPanel(Self.Tabs[0]);
  Self.CreateAPISettings();
  Self.CreateAccountManager();
end;


// by Rasta Magician, veteran SRL-er
function ProgReport(
                           ResultType:int32; ScriptName, ScriptAuthor, ScriptVersion: String;
                           VarNames: TStringArray;
                           VarValues: TVariantArray
                          ): Variant;
var
  TSA        : TStringArray;
  s,s2       : String;
  s3         : String := '=';
  s4         : String := ' ';
  i, i2, L   : Int32;
begin
  if (ResultType = 2) then
    Result := '';

  if length(VarNames) <> Length(VarValues) then
  begin
    Writeln('VarNames and VarValues must be the same length');
    exit;
  end;
  SetLength(TSA, 3 + Length(VarNames) + 4);
  s2 := 'by '+ScriptAuthor;

  TSA[0] := s3;
  TSA[1] := ScriptName.Capitalize+' '+ScriptVersion;
  TSA[2] := s2;
  TSA[3] := s3;

  i2 := 3 + Length(VarNames);

  for i:= 4 to i2 do
    L := Max(L, Length(VarNames[i-4]));

  for i:= 4 to i2 do
  begin
    s := VarValues[i-4];
    TSA[i] := Padr((VarNames[i-4]).Capitalize, L)+' : '+ s.Capitalize;
  end;

  TSA[i2+1] := s3;
  TSA[i2+2] := ScriptName.Capitalize+' '+ScriptVersion;
  TSA[i2+3] := s3;

  i2 := 0;
  for i:= 0 to High(TSA) do
    i2 := Max(i2, Length(TSA[i]));

  TSA[0]           := s3.Replicate(i2);
  TSA[3]           := s3.Replicate(i2);
  TSA[High(TSA)-2] := s3.Replicate(i2);
  TSA[High(TSA)]   := s3.Replicate(i2);

  TSA[2] := s4.Replicate(round((i2 - Length(TSA[2]))/2)) + TSA[2]; //centering by ScriptAuthor
  TSA[High(TSA)-1] := s4.Replicate(round((i2 - Length(TSA[High(TSA)-1]))/2)) + TSA[High(TSA)-1];

  for i:= 0 to High(TSA) do
    if (TSA[i][1] = s3) then
      case ResultType of
        0 : writeln     ('[='+Padr(TSA[i], i2)+'=]');
        1 : writeln     ('[='+Padr(TSA[i], i2)+'=]');
        2 : Result := Result + '[='+Padr(TSA[i], i2)+'=]' + chr(13);
        else begin Writeln('Invalid Result Type'); exit; end;
      end
    else
      case ResultType of
        0 : writeln     ('[ '+Padr(TSA[i], i2)+' ]');
        1 : writeln     ('[ '+Padr(TSA[i], i2)+' ]');
        2 : Result := Result + '[ '+Padr(TSA[i], i2)+' ]' + chr(13);
        else begin Writeln('Invalid Result Type'); exit; end;
      end;

  if not ResultType = 2 then Result := true;
end;

procedure TScript.Report();
var
  XpGained: Int32;
  RunTime: Int64;
  SArr: TStringArray;
  VArr: TVariantArray;
begin
  XPBar.EarnedXP();
  if not APIClient.IsSetup or APIClient.Timer.IsFinished() then
    APIClient.SubmitStats(APIClient.GetUUID());

  XpGained := XPBar.Read()-Self.StartXP;
  RunTime  := Self.TrueRunTime.ElapsedTime();

  SArr := ['Runtime','XP gained','Amethyst','Unidentified Minerals', 'Trips'];
  VArr := [SRL.MsToTime(GetTimeRunning, Time_Short),
            ToStr(Round(XpGained, 2), '(', Round(XpGained / (RunTime / 1000 / 60 / 60)), ' / hr)'),
            ToStr(Self.CAmethyst, '(', NumberPerHour(Self.CAmethyst), ' / hr)'),
            ToStr(Self.CUniMaterials, '(', NumberPerHour(Self.CUniMaterials), ' / hr)'),
            ToStr(Self.Inventories, '(', NumberPerHour(Self.Inventories), ' / hr)')];

  if Self.TakeBreaks then
  begin
    SArr += 'Until break';
    VArr += Antiban.TimeUntilBreak(Antiban.Breaks[1]);
  end;

  if Self.TakeSleeps then
  begin
    SArr += 'Until sleep';
    VArr += SRL.MsToTime(Max(0, Round(Antiban.Sleeps[0].NextAtTime - GetTimeRunning)), TIME_BARE);
  end;

  SArr += 'Shutdown';
  VArr += ToStr(SRL.MsToTime(Self.ShutdownTime - GetTimeRunning, Time_Short));

  ProgReport(1, 'BAmethyst','Barr', 'Beta 0.01', SArr, VArr);
end;

// Undo the bogged down version in WaspLib, from Flight's AeroMLM
function TRSChooseOption.Select(Text: TStringArray; MouseAction: Int32 = MOUSE_LEFT; CaseSensitive: Boolean = True; CloseIfNotFound: Boolean = True): Boolean; override;
var
  Choices: TRSChooseOption_OptionArray;
  I, J: Int32;
begin
  if Self.Open() then
  begin
    Wait(0, 750, wdLeft);

    Choices := GetOptions();

    for I := 0 to High(Choices) do
      for J := 0 to High(Text) do
        if (CaseSensitive and (Text[J] in Choices[I].Text)) or ((not CaseSensitive) and (Lowercase(Text[J]) in Lowercase(Choices[I].Text))) then
        begin
          Self.Select(Choices[I], MouseAction);
          Exit(True);
        end;

    if CloseIfNotFound then
    begin
      WaitEx(400, 150);

      Self.Close();
    end;
  end;
end;

//Thanks to Flight.
function TScript.HasTool(): Boolean;
var
  i,Slot: Int32;
  Picks: TRSItemArray := ['Bronze pickaxe','Iron pickaxe','Steel pickaxe','Mithril pickaxe',
                          'Adamant pickaxe','Rune pickaxe','Dragon pickaxe',
                          'Infernal pickaxe','Crystal pickaxe'];
begin
  if (not RSClient.IsLoggedIn) then Exit;

  for i:=0 to High(Picks) do
    if Inventory.FindItem(Picks[i], Slot) then
    begin
      Self.ToolSlot := Slot;
      Exit(True);
    end;

  if Equipment.ContainsAny(Picks) then Exit(True);
end;

function TScript.HasOres(): Boolean;
var
  Ore: TRSItem;
  Ores: TStringArray := ['Amethyst','Unidentified minerals','Uncut sapphire',
                         'Uncut emerald','Uncut ruby','Uncut diamond'];
begin
  for Ore in Ores do
    if Inventory.ContainsItem(Ore) then
      Exit(True);
end;

//Thanks Flight;
function TMSObject.Find(out Pnt: TPoint): Boolean;
var
  B: TBox;
  i: Int32;
  Rect: TRectangle;
  ATPA: T2DPointArray;
  Finder: TRSObjectFinder;
  MyPos: TPoint := Bot.RSW.GetMyPos();
begin
  Finder.Colors += Self.Color;

  Finder.Erode := 2;
  Finder.ClusterDistance := 10;

  for i:=0 to Self.Tiles.Len-1 do
  begin
    Rect := Bot.RSW.GetTileMSEx(MyPos, Self.Tiles[i]);
    Rect := Rect.Expand(Self.Expand);
    B    := Rect.Bounds;

    B.LimitTo(MainScreen.Bounds);
    if (not MainScreen.IsVisible(B.Middle())) then Continue;

    ATPA := MainScreen.FindObject(Finder, B);
    if (ATPA.Len > 0) then
    begin
      Pnt := ATPA.Biggest().Mean();
      Exit(True);
    end else
      Continue;
  end;
end;

//Thanks Flight;
function TMSObject.Interact(): Boolean;
Var
  Pt: TPoint;
  Clicked: Boolean;
begin
  if (not Self.Find(Pt)) then
  begin
    if (not Bot.RSW.WebWalk(Self.WalkTile, 30)) then
      Antiban.RandomRotate();

    while Minimap.IsPlayerMoving() do
    begin
      if (not Self.Find(Pt)) then Continue;
      ASyncMouse.Move(Pt);

      while ASyncMouse.IsMoving() do
      begin
        if Self.Find(Pt) then
          ASyncMouse.ChangeDestination(Pt);

        if MainScreen.IsUpText(Self.UpText) then
        begin
          Mouse.Click(MOUSE_LEFT);
          Result := Mainscreen.DidRedClick;
          if Result then Exit;
        end;
      end;
      if Clicked then Break;
    end;
  end else
    Mouse.Move(Pt);

  if (not Clicked) then
  begin
    if (not MainScreen.IsUpText(Self.UpText, 50)) then
    begin
      if Self.Find(Pt) then
        Mouse.Move(Pt);
      if (not MainScreen.IsUpText(Self.UpText, 50)) then
      begin
        if (not Bot.RSW.WalkBlind(Self.WalkTile, 30)) then
          Antiban.RandomRotate();
        Exit;
      end;
    end;

    Mouse.Click(MOUSE_LEFT);
    Result := Mainscreen.DidRedClick;
  end;
end;

//Based on Flight's DepositOre from AeroMLM
function TScript.DepositOre(): Boolean;
var
  AllItems: TStringArray := ['Amethyst', 'Unidentified minerals','Uncut sapphire',
                             'Uncut emerald','Uncut ruby','Uncut diamond', 'Coal'];   //sometimes you mine a coal lol
  First: Boolean := SRL.Dice(80);
  Clicked: Boolean;
  Item: TRSItem;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  if Bank.IsOpen() then Bank.Close();

  if (not DepositBox.IsOpen) then
    if (not Self.HasOres()) then Exit;

  if  (RSW.GetMyPos.DistanceTo(DBTile) >= 15) then
  begin
    Minimap.EnableRun();
    Minimap.WaitFlag(1);
    RSW.WalkBlind(DBTile);
    Exit;
  end;

  if (not DepositBox.IsOpen()) then
  begin
    for 1 to 3 do
    begin
      if  (not DepositBox.IsOpen()) then
        if  Self.DepositBoxObj.Interact() then
        begin
          Clicked := True;
          if  WaitUntil(Minimap.IsPlayerMoving, 125, 3500) then
          begin
            Minimap.WaitFlag(1);
            Minimap.WaitPlayerMoving;
          end;
          break;
        end;

      Inc(Self.FailCount);
      if  WaitUntil(Minimap.IsPlayerMoving, 125, 3500) then
        Minimap.WaitPlayerMoving;
    end;

    if Clicked then
    begin
      if  (not WaitUntil(DepositBox.IsOpen, 125, 3500)) then
      begin
        Self.WriteMsg('Clicked depositbox, but never opened.');
      end;
    end else
    begin
      Self.WriteMsg('Failed to click the deposit box');
      Exit;
    end;
  end;

  Inc(Self.CAmethyst, DepositBox.CountItem('Amethyst'));
  Inc(Self.CUniMaterials, DepositBox.CountItemStack('Unidentified minerals'));
  Inc(Self.Inventories);

  if  (Self.ToolSlot > -1) or DepositBox.ContainsItem('Open gem bag') then
  begin

    if  Self.EmptyGemBag then
      if First then
        DepositBox.ClickItem('Open gem bag', 'Empty');

    if SRL.Dice(80) then
      AllItems.Reverse();

    for Item in AllItems do
    begin
      DepositBox.DepositItem([Item,-1,False], True);
      if SRL.Dice(75) then
      begin
        if SRL.Dice(35) then
          Wait(650,1250)
        else
          WaitEx(200, 20);
      end;
    end;

    if Self.EmptyGemBag then
      if (not First) then
        DepositBox.ClickItem('Open gem bag', 'Empty');

    Self.EmptyGemBag := False;

  end else
    DepositBox.DepositAll();

  DepositBox.Close();
  WaitUntil((not Depositbox.IsOpen), 125, 4000);
  Result := WaitUntil((Inventory.Count <= 5), 75, 4000);
  if Result then Self.FailCount := 0;

  Self.Report();

end;

function TScript.FindOre(): TPointArray;
var
  i: Int32;
  B,PBox: TBox;
  MMPnt,AmethystPt: TPoint;
  MyPos: TPoint := Self.RSW.GetMyPos;
  AmethystRect: TRectangle;
  AmethystTPA,Dots: TPointArray;
  AmethystCol: TCTS2Color := CTS2(7298195, 22, 0.17, 0.40);
begin

  if (not RSClient.IsLoggedIn) then Exit;
  Dots := Minimap.GetDots(ERSMinimapDot.PLAYER);
  Dots := Dots.Offset(2,2);
  PBox := Mainscreen.GetPlayerBox();

  for i:=0 to High(AmethystOre.Coordinates) do
  begin
    AmethystRect  := Self.RSW.GetTileMSEx(MyPos, AmethystOre.Coordinates[i], 5);
    AmethystRect  := AmethystRect.Expand(7);
    B := AmethystRect.Bounds;
    B.LimitTo(MainScreen.Bounds);

    if  SRL.FindColors(AmethystTPA, AmethystCol, B) then
      if  (not PBox.Contains(AmethystTPA.Median)) then
      begin
        AmethystPt  := AmethystTPA.Median;
      end;

      MMPnt := Self.RSW.WorldToMM(AmethystOre.Coordinates[i]);
      if Dots.Len > 0 then
      begin
        Dots  := Dots.SortFrom(MMPnt);
        if  (MMPnt.DistanceTo(Dots[0]) <= PDIST) then
          Continue;
      end;

      Result  += AmethystPt;
  end;

  Result.Sort([PBox.Middle.X, PBox.Y1]);

end;


procedure TScript.MineOres();
var
  XP, i: Int32;
  T: TCountDown;
  Ore: TPointArray;
  MyPos, RandTile: TPoint;

begin
  if (not RSClient.IsLoggedIn) then Exit;
  if Bank.IsOpen() then Bank.Close();

  if DepositBox.IsOpen() then
  begin
    DepositBox.Close();
    Exit;
  end;

  if Inventory.ContainsItem('Gem bag') then
    Inventory.ClickItem('Gem bag', 'Open');

  Self.EmptyGemBag := True;

  MyPos := Self.RSW.GetMyPos();
  if (not SRL.PointInPoly(MyPos, MiningArea)) then
  begin
    RSW.WebWalk(AmethystOre.Coordinates[Random(0,14)]);
    Exit;
  end;

  Ore := Bot.FindOre();

  for i := 0 to High(Ore) do
  begin
    Mouse.Move(Ore[i]);
    if  (MainScreen.IsUpText(AmethystOre.UpText)) then
      break;
  end;

  XP := XPBar.Read();

  Mouse.Click(MOUSE_LEFT);
  if not MainScreen.DidRedClick then
  begin
    Inc(Self.FailCount);
    Exit;
  end;

  T.Init(SRL.NormalRange(2700, 3100));

  while (not T.IsFinished) do
  begin
    if (not RSClient.IsLoggedIn) then Exit;
    if Inventory.IsFull() then break;

    if XPBar.Read() > XP then
    begin
      XP := XPBar.Read();
      T.Restart();
    end;

    if (Pos('need a pickaxe', Chat.GetChat) <> 0) then
    begin
      Chat.ClickContinue;
      Logout.ClickLogout();
      TerminateScript('Player does not have a pickaxe');
    end;

    if Chat.ClickContinue(False) then
      T.Restart;

    if (SRL.PercentShift(MainScreen.GetPlayerBox(), 500) >= PERCSHIFT) then
      T.Restart();

    if Antiban.DoAntiban then
      T.Restart();

    Wait(250);
  end;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(3700,5000));
end;

procedure BreakPause(Task: PBreakTask);
Var T: PBreakTask;
begin
  Bot.TrueRunTime.Pause;
  T := Task;
end;

procedure BreakResume(Task: PBreakTask);
Var T: PBreakTask;
begin
  if GetTimeRunning() > Bot.ShutdownTime then
    TerminateScript('Time to shutdown');

  Bot.TrueRunTime.Resume;
  T := Task;
end;

procedure SleepPause(Task: PSleepTask);
Var T: PSleepTask;
begin
  Bot.TrueRunTime.Pause;
  T := Task;
end;

procedure SleepResume(Task: PSleepTask);
Var T: PSleepTask;
begin
  if GetTimeRunning() > Bot.ShutdownTime then
    TerminateScript('Time to shutdown');

  Bot.TrueRunTime.Resume;
  T := Task;
end;

procedure TScript.DoLoseFocus();
Var T: Int32;
begin
  T := SRL.NormalRange(1700,8000);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

//Thanks Flight for all of these methods.
procedure TAntiBan.SetupAntiban();
begin
  Bot.WriteMsg('Setting up antiban...');

  Antiban.Skills += ERSSKILL.MINING;
  Antiban.AddTask(ONE_MINUTE*2,  @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE*6,  @Self.Swivel);
  Antiban.AddTask(ONE_MINUTE*5,  @Self.SmallCameraRotation);
  Antiban.AddTask(ONE_MINUTE*6,  @Self.DoLoseFocus);
  Antiban.AddTask(ONE_MINUTE*6,  @Self.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*8,  @Self.HoverMSItems);
  Antiban.AddTask(ONE_MINUTE*8,  @Self.HoverMSNPCs);
  Antiban.AddTask(ONE_MINUTE*20, @Self.HoverSkills);
  Antiban.AddBreak(ONE_MINUTE*18, ONE_SECOND*40, 0.2, 0.0);

  if Bot.TakeBreaks then
  begin
    Antiban.OnStartBreak  := @BreakPause;
    Antiban.OnFinishBreak := @BreakResume;
  end;

  if Bot.TakeSleeps then
  begin
    Antiban.OnStartSleep  := @SleepPause;
    Antiban.OnFinishSleep := @SleepResume;
  end;
end;

procedure TScript.Init();
begin

  Mouse.Speed               := Random(20, 28);
  Mouse.CanIdle             := False;
  Mouse.MissChance          := 13;
  Mouse.Distribution        := MOUSE_DISTRIBUTION_GAUSS;
  MM2MS.ZoomLevel           := Options.GetZoomLevel();

  RSClient.Image.Clear(MainScreen.Bounds);

  with Self do
  begin
    StartXP                 := XPBar.Read();
    ToolSlot                := -1;
    CAmethyst               := 0;
    CUniMaterials           := 0;
    Inventories             := 0;
    MiningArea              := [[6397, 712], [6460, 717],
                                [6464, 662], [6397, 661]];

    RSW.SetupRegions([RSRegions.MINING_GUILD]);
    RSW.ScreenWalk          := True;
    RSW.EnableRunAtEnergy   := 85;

  end;

  with DepositBoxObj do
  begin
    Color     := CTS2(6251628, 18, 0.38, 0.26);
    UpText    := ['Deposit Bank','Deposit Box'];
    Tiles     := [DBTile];
    WalkTile  := [DBTile.X-4, DBTile.Y];
    Expand    := 10;

  end;

  with AmethystOre do
  begin
    Setup(7,
    [[6453, 687], [6452, 691], [6452, 695], [6453, 683], [6449, 675],[6448, 671],
    [6439, 692], [6440, 684], [6435, 708], [6431, 710], [6427, 709], [6415, 704],
    [6435, 695], [6427, 695], [6413, 704], [6403, 696], [6403, 687], [6413, 687]]);
    SetupUpText(['ine Amethy']);
    Finder.Colors += CTS2(7298195, 22, 0.17, 0.40);
    Finder.MinShortSide := 20;
  end;

  Antiban.SetupAntiban();

  if  (not HasTool) then
  begin
    Logout.ClickLogout();
    TerminateScript('Pickaxe not found.');
  end;

end;

function TScript.GetState(): EState;
begin

  if (not RSClient.IsLoggedIn) then Exit;
  if DepositBox.IsOpen() then DepositBox.Close();

  if (Inventory.IsFull()) then
  begin
    Exit(EState.DEPOSIT_ITEMS);
  end;

  if (Minimap.IsSpecWeapon()) and (Minimap.GetSpecLevel() = 100)
            and (not Inventory.IsFull()) and SRL.PointInPoly(RSW.GetMyPos(), MiningArea) then
  begin
    Exit(EState.DO_SPEC);
  end;

  Exit(EState.MINING);

end;

Procedure TScript.Run();
begin

  if (not RSClient.IsLoggedIn) then
    if Login.GetPlayer.Password <> '' then
      Login.LoginPlayer
    else
    begin
      Self.WriteMsg('No player credentials');
      Exit;
    end;

  while (GetTimeRunning() < Self.ShutdownTime) do
  begin

    if (not RSClient.IsLoggedIn) then
    begin
      if Login.GetPlayer.Password <> '' then
        Login.LoginPlayer
      else
      begin
        Logout.ClickLogout();
        TerminateScript('No player credentials');
      end;
    end;

    if Self.FailCount > 4 then
    begin
      Logout.ClickLogout();
      TerminateScript('Script failure limit reached');
    end;

    if DepositBox.IsOpen() then DepositBox.Close;

    Self.State := Self.GetState();

    case Self.State of
    EState.MINING: Bot.MineOres();
    EState.DEPOSIT_ITEMS: Bot.DepositOre();
    EState.DO_SPEC:
      begin
        Minimap.EnableSpec(100);
        Wait(randomRange(500, 1200));
      end;

    end;

  end;

  Logout.ClickLogout();
  TerminateScript('Time to shutdown');
end;

//main
begin

  if (not DirectoryExists(AppPath+'\Resources\')) then
    CreateDirectory(AppPath+'\Resources');

  if (not FileExists(AppPath+'\Resources\BBackground.jpg')) then
    DownloadToFile('https://i.imgur.com/U6h3P8A.jpeg', AppPath+'\Resources\BBackground.jpg');


  GUI.Setup('BAmethyst', [755,425]);
  GUI.PageControl.SetAllChildsFontColor($00FFFF);
  GUI.Run;

  if (not RSClient.IsLoggedIn) then
    if Login.GetPlayer.Password <> '' then
      Login.LoginPlayer
    else
      TerminateScript('No player credentials');

  Bot.Init();
  Bot.Run();

end.
